type: edu
files:
- name: hstest/test.js
  visible: false
  text: "const puppeteer = require('puppeteer');\nconst path = require('path');\n\
    // '..' since we're in the hstest/ subdirectory; learner is supposed to have src/index.html\n\
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');\n\n\
    const hs = require('hs-test-web');\n\nconst sleep = (ms) => new Promise(res =>\
    \ setTimeout(res, ms));\n\nasync function stageTest() {\n    const browser = await\
    \ puppeteer.launch({\n        headless: false,\n        defaultViewport: null,\n\
    \        args:['--start-maximized']\n    });\n\n    const page = await browser.newPage();\n\
    \    await page.goto(pagePath);\n\n    page.on('console', msg => {\n        console.log(msg.text());\n\
    \    });\n\n    await sleep(1000);\n\n    await page.evaluate(() => {\n      \
    \  this.RealAudio = this.Audio;\n        this.audioCreated = [];\n        this.Audio\
    \ = function(...args) {\n            audioCreated.push(args[0]);\n           \
    \ return new RealAudio(...args);\n        };\n\n        this.oldCreate = document.createElement;\n\
    \        document.createElement = function(...args) {\n            if (args[0].toLowerCase()\
    \ === 'audio') {\n                audioCreated.push(args[0]);\n            }\n\
    \            return oldCreate(...args);\n        }\n    });\n\n    let result\
    \ = await hs.testPage(page,\n        // Test #1 - audio object creation check\n\
    \        () => {\n            let keys = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'w',\
    \ 'e', 't', 'y', 'u' ];\n            keys.forEach(function (key) {\n         \
    \       hs.press(key);\n            });\n\n            let audioElements = this.audioCreated.length;\n\
    \n            if (audioElements === 0) {\n                return hs.wrong(`Ð¡annot\
    \ find the audio objects`);\n            } else if (audioElements < keys.length)\
    \ {\n                return hs.wrong(`There are not enough audio objects, ${audioElements}\
    \ of 12 objects were found`);\n            } else if (audioElements > keys.length)\
    \ {\n                return hs.wrong(`There are too many audio objects, found\
    \ ${audioElements} instead of 12 objects`);\n            }\n            return\
    \ hs.correct();\n        },\n\n        // Test #2 - check div element with class\
    \ 'container' + 2 elements inside\n        () => {\n            let containerElements\
    \ = document.getElementsByClassName('container');\n            if (containerElements.length\
    \ === 0) {\n                return hs.wrong(`Cannot find element with class 'container'`);\n\
    \            } else if (containerElements.length > 1) {\n                return\
    \ hs.wrong(`Found ${containerElements.length} elements with class 'container'`\
    \ +\n                    `, the page should contain just a single such element.`);\n\
    \            }\n\n            let container = containerElements[0];\n        \
    \    this.div = container;\n\n            let contName = container.nodeName.toLowerCase();\n\
    \            if (contName !== 'div') {\n                return hs.wrong(`Cannot\
    \ find 'div' element with class 'container'.`);\n            }\n\n           \
    \ let containerNodes = Array.from(container.childNodes);\n            this.innerDivElements\
    \ = containerNodes.filter(\n                e => e.nodeType === Node.ELEMENT_NODE);\n\
    \n            let len = this.innerDivElements.length;\n\n            return len\
    \ === 2 ?\n                hs.correct() :\n                hs.wrong(`Div with\
    \ class 'container' should contain 2 elements, found: ${len}`)\n        },\n\n\
    \        // Test #3 - check if all 2 elements are <div> elements\n        () =>\
    \ {\n            let i = 0;\n            for (let elem of this.innerDivElements)\
    \ {\n                i++;\n                elem = elem.nodeName.toLowerCase();\n\
    \                if (elem !== 'div') {\n                    return hs.wrong(`Element\
    \ inside container #${i} is not <div> element, it's <${elem}>`);\n           \
    \     }\n            }\n            return hs.correct();\n        },\n\n     \
    \   // Test #4 - check div element with class 'white-keys' + 7 elements inside\n\
    \        () => {\n            let whiteKeysElement = document.getElementsByClassName('white-keys');\n\
    \            if (whiteKeysElement.length === 0) {\n                return hs.wrong(`Cannot\
    \ find element with class 'white-keys'`);\n            } else if (whiteKeysElement.length\
    \ > 1) {\n                return hs.wrong(`Found ${whiteKeysElement.length} elements\
    \ with class 'white-keys'` +\n                    `, the page should contain just\
    \ a single such element.`);\n            }\n\n            let whiteKeys = whiteKeysElement[0];\n\
    \            this.div = whiteKeys;\n\n            let contName = whiteKeys.nodeName.toLowerCase();\n\
    \            if (contName !== 'div') {\n                return hs.wrong(`Cannot\
    \ find 'div' element with class 'white-keys'.`);\n            }\n\n          \
    \  let containerNodes = Array.from(whiteKeys.childNodes);\n            this.innerDivElements\
    \ = containerNodes.filter(\n                e => e.nodeType === Node.ELEMENT_NODE);\n\
    \n            let len = this.innerDivElements.length;\n\n            return len\
    \ === 7 ?\n                hs.correct() :\n                hs.wrong(`Div with\
    \ class 'white-keys' should contain 7 elements, found: ${len}`)\n        },\n\n\
    \        // Test #5 - check if all 7 elements are <kbd> elements\n        () =>\
    \ {\n            let i = 0;\n            for (let elem of this.innerDivElements)\
    \ {\n                i++;\n                elem = elem.nodeName.toLowerCase();\n\
    \                if (elem !== 'kbd') {\n                    return hs.wrong(`Element\
    \ #${i} inside div with class 'white-keys' is not <kbd> element, it's <${elem}>`);\n\
    \                }\n            }\n            return hs.correct();\n        },\n\
    \n        // Test #6 - check if all 7 elements contain a single letter\n     \
    \   () => {\n            let i = 0;\n            for (let elem of this.innerDivElements)\
    \ {\n                i++;\n                elem = elem.innerHTML;\n          \
    \      if (elem.length === 0) {\n                    return hs.wrong(`Element\
    \ #${i} inside div with class 'white-keys' is empty, but should contain a single\
    \ letter.`);\n                } else if (elem.length > 1) {\n                \
    \    return hs.wrong(`Element #${i} inside div with class 'white-keys' contains\
    \ ${elem.length} symbols, ` +\n                        `but should contain a single\
    \ letter. The text inside element is:\\n\"${elem}\"`);\n                }\n  \
    \          }\n            return hs.correct();\n        },\n\n        // Test\
    \ #7 - Test if all elements have the same top y-coordinate\n        // (located\
    \ on a single horizontal line)\n        () => {\n            let referenceTop\
    \ = this.innerDivElements[0].getBoundingClientRect().top;\n            let i =\
    \ 0;\n            for (let elem of this.innerDivElements) {\n                i++;\n\
    \                let currTop = elem.getBoundingClientRect().top;\n           \
    \     if (currTop !== referenceTop) {\n                    return hs.wrong(`Looks\
    \ like element #1 and element #${i} ` +\n                        `don't have the\
    \ same top y coordinate. ` +\n                        `All 7 elements should be\
    \ located on a single horizontal line.`)\n                }\n            }\n \
    \           return hs.correct();\n        },\n\n        // Test #8 - Test if all\
    \ elements are located in the middle\n        () => {\n            let width =\
    \ window.innerWidth;\n            let height = window.innerHeight;\n\n       \
    \     let mostLeftPx = this.innerDivElements[0].getBoundingClientRect().left;\n\
    \            let mostRightPx = this.innerDivElements[2].getBoundingClientRect().right;\n\
    \n            let freeSpaceOnLeft = mostLeftPx;\n            let freeSpaceOnRight\
    \ = width - mostRightPx;\n            let freeSpaceOnTop = this.innerDivElements[0].getBoundingClientRect().top;\n\
    \            let freeSpaceOnBottom = this.innerDivElements[0].getBoundingClientRect().bottom;\n\
    \n            if (freeSpaceOnLeft < width / 10) {\n                return hs.wrong(\"\
    There should be at least 10% \" +\n                    \"free space to the left\
    \ of the piano.\")\n            }\n\n            if (freeSpaceOnRight < width\
    \ / 10) {\n                return hs.wrong(\"There should be at least 10% \" +\n\
    \                    \"free space to the right of the piano.\")\n            }\n\
    \n            if (freeSpaceOnTop < height / 10) {\n                return hs.wrong(\"\
    There should be at least 10% \" +\n                    \"free space above the\
    \ piano.\")\n            }\n\n            if (freeSpaceOnBottom < height / 10)\
    \ {\n                return hs.wrong(\"There should be at least 10% \" +\n   \
    \                 \"free space below the piano.\")\n            }\n          \
    \  return hs.correct();\n        },\n\n        // Test #9 - Test if all elements\
    \ have border\n        () => {\n            let i = 0;\n            for (let elem\
    \ of this.innerDivElements) {\n                i++;\n                let currBorder\
    \ = window.getComputedStyle(elem).border;\n                if (currBorder.includes('0px'))\
    \ {\n                    return hs.wrong(`Looks like piano's element #${i} ` +\n\
    \                        `has no border. It should have a border.`);\n       \
    \         }\n            }\n            return hs.correct()\n        },\n\n  \
    \      // Test #10 - Test if 7 element's background color is white and\n     \
    \   // body's background in not white\n        () => {\n            function getRealColor(elem)\
    \ {\n                while (elem) {\n                    let color = window.getComputedStyle(elem).backgroundColor;\n\
    \                    if (color !== \"rgba(0, 0, 0, 0)\") {\n                 \
    \       let match = color.match(/^rgba?\\((\\d+), (\\d+), (\\d+)(, \\d+)?\\)$/i);\n\
    \                        return {\n                            red: Number(match[1]),\n\
    \                            green: Number(match[2]),\n                      \
    \      blue: Number(match[3]),\n                            hex: Number(match[1])\
    \ * 65536 + Number(match[2]) * 256 + Number(match[3])\n                      \
    \  };\n                    }\n                    elem = elem.parentElement;\n\
    \                }\n                return null;\n            }\n\n          \
    \  let bodyBack = getRealColor(document.body);\n            if (bodyBack === null)\
    \ {\n                return hs.wrong(\"Looks like body's background color is not\
    \ set. \" +\n                    \"It should be some non-white color.\")\n   \
    \         }\n\n            if (bodyBack.hex === 0xFFFFFF) {\n                return\
    \ hs.wrong(\"Looks like body's background color is white. \" +\n             \
    \       \"It should be some non-white color.\")\n            }\n\n           \
    \ let i = 0;\n            for (let elem of this.innerDivElements) {\n        \
    \        i++;\n                let currColor = getRealColor(elem);\n         \
    \       if (currColor.hex !== 0xFFFFFF) {\n                    return hs.wrong(`Looks\
    \ like piano's element #${i} ` +\n                        `have non-white background\
    \ color. It should be colored white.`);\n                }\n            }\n  \
    \          return hs.correct()\n        },\n\n        // Test #11 - Test display,\
    \ width, height\n        () => {\n            let i = 0;\n            for (let\
    \ elem of this.innerDivElements) {\n                i++;\n                let\
    \ currDisplay = window.getComputedStyle(elem).display;\n                if (currDisplay\
    \ !== 'inline-block') {\n                    return hs.wrong(`Looks like piano's\
    \ element #${i} ` +\n                        `has display style = '${currDisplay}'.\
    \ It should be 'inline-block'.`);\n                }\n\n                let currWidth\
    \ = window.getComputedStyle(elem).width;\n                if (currWidth === 'auto')\
    \ {\n                    return hs.wrong(`Looks like piano's element #${i} ` +\n\
    \                        `has width style = 'auto'. It should have some numeric\
    \ value.`);\n                }\n\n                let currHeight = window.getComputedStyle(elem).height;\n\
    \                if (currHeight === 'auto') {\n                    return hs.wrong(`Looks\
    \ like piano's element #${i} ` +\n                        `has height style =\
    \ 'auto'. It should have some numeric value.`);\n                }\n         \
    \   }\n            return hs.correct()\n        },\n\n        // Test #12 - check\
    \ div element with class 'black-keys' + 5 elements inside\n        () => {\n \
    \           let blackKeysElement = document.getElementsByClassName('black-keys');\n\
    \            if (blackKeysElement.length === 0) {\n                return hs.wrong(`Cannot\
    \ find element with class 'black-keys'`);\n            } else if (blackKeysElement.length\
    \ > 1) {\n                return hs.wrong(`Found ${blackKeysElement.length} elements\
    \ with class 'black-keys'` +\n                    `, the page should contain just\
    \ a single such element.`);\n            }\n\n            let blackKeys = blackKeysElement[0];\n\
    \            this.div = blackKeys;\n\n            let contName = blackKeys.nodeName.toLowerCase();\n\
    \            if (contName !== 'div') {\n                return hs.wrong(`Cannot\
    \ find 'div' element with class 'black-keys'.`);\n            }\n\n          \
    \  let containerNodes = Array.from(blackKeys.childNodes);\n            this.innerDivElements\
    \ = containerNodes.filter(\n                e => e.nodeType === Node.ELEMENT_NODE);\n\
    \n            let len = this.innerDivElements.length;\n\n            return len\
    \ === 5 ?\n                hs.correct() :\n                hs.wrong(`Div with\
    \ class 'black-keys' should contain 5 elements, found: ${len}`)\n        },\n\n\
    \        // Test #13 - check if all 5 elements are <kbd> elements\n        ()\
    \ => {\n            let i = 0;\n            for (let elem of this.innerDivElements)\
    \ {\n                i++;\n                elem = elem.nodeName.toLowerCase();\n\
    \                if (elem !== 'kbd') {\n                    return hs.wrong(`Element\
    \ #${i} is not <kbd> element, it's <${elem}>`);\n                }\n         \
    \   }\n            return hs.correct();\n        },\n\n        // Test #14 - check\
    \ if all 5 elements contain a single letter\n        () => {\n            let\
    \ i = 0;\n            for (let elem of this.innerDivElements) {\n            \
    \    i++;\n                elem = elem.innerHTML;\n                if (elem.length\
    \ === 0) {\n                    return hs.wrong(`Element #${i} is empty, but should\
    \ contain a single letter.`);\n                } else if (elem.length > 1) {\n\
    \                    return hs.wrong(`Element #${i} contains ${elem.length} symbols,\
    \ ` +\n                        `but should contain a single letter. The text inside\
    \ element is:\\n\"${elem}\"`);\n                }\n            }\n           \
    \ return hs.correct();\n        },\n\n        // Test #15 - Test display\n   \
    \     () => {\n            let i = 0;\n            for (let elem of this.innerDivElements)\
    \ {\n                i++;\n                let currDisplay = window.getComputedStyle(elem).display;\n\
    \                if (currDisplay !== 'inline-block') {\n                    return\
    \ hs.wrong(`Looks like piano's element #${i} ` +\n                        `has\
    \ display style = '${currDisplay}'. \n                        It should be 'inline-block'\
    \ and different in size from the white keys.`);\n                }\n         \
    \   }\n            return hs.correct()\n        },\n\n        // Test #16 - Test\
    \ if the background color of 5 elements is black\n        () => {\n          \
    \  function getRealColor(elem) {\n                while (elem) {\n           \
    \         let color = window.getComputedStyle(elem).backgroundColor;\n       \
    \             if (color !== \"rgba(0, 0, 0, 0)\") {\n                        let\
    \ match = color.match(/^rgba?\\((\\d+), (\\d+), (\\d+)(, \\d+)?\\)$/i);\n    \
    \                    return {\n                            red: Number(match[1]),\n\
    \                            green: Number(match[2]),\n                      \
    \      blue: Number(match[3]),\n                            hex: Number(match[1])\
    \ * 65536 + Number(match[2]) * 256 + Number(match[3])\n                      \
    \  };\n                    }\n                    elem = elem.parentElement;\n\
    \                }\n                return null;\n            }\n\n          \
    \  let i = 0;\n            for (let elem of this.innerDivElements) {\n       \
    \         i++;\n                let currColor = getRealColor(elem);\n        \
    \        if (currColor.hex !== 0x000000) {\n                    return hs.wrong(`Looks\
    \ like piano's element #${i} ` +\n                        `have non-black background\
    \ color. It should be colored black.`);\n                }\n            }\n  \
    \          return hs.correct()\n        },\n\n\n        // Test #17 - Test if\
    \ the color of 5 elements is not black\n        () => {\n            function\
    \ getRealColor(elem) {\n                while (elem) {\n                    let\
    \ color = window.getComputedStyle(elem).getPropertyValue('color');\n         \
    \           if (color !== \"rgba(0, 0, 0, 0)\") {\n                        let\
    \ match = color.match(/^rgba?\\((\\d+), (\\d+), (\\d+)(, \\d+)?\\)$/i);\n    \
    \                    return {\n                            red: Number(match[1]),\n\
    \                            green: Number(match[2]),\n                      \
    \      blue: Number(match[3]),\n                            hex: Number(match[1])\
    \ * 65536 + Number(match[2]) * 256 + Number(match[3])\n                      \
    \  };\n                    }\n                    elem = elem.parentElement;\n\
    \                }\n                return null;\n            }\n\n          \
    \  let i = 0;\n            for (let elem of this.innerDivElements) {\n       \
    \         i++;\n                let currColor = getRealColor(elem);\n        \
    \        if (currColor.hex === 0x000000) {\n                    return hs.wrong(\"\
    Looks like the black key name color is not specified or it is black. \" +\n  \
    \                      \"The color of the key name can be any color, but not black.\"\
    );\n                }\n            }\n            return hs.correct()\n      \
    \  },\n    );\n\n    await browser.close();\n    return result;\n}\n\n\njest.setTimeout(30000);\n\
    test(\"Test stage\", async () => {\n        let result = await stageTest();\n\
    \        if (result['type'] === 'wrong') {\n            fail(result['message']);\n\
    \        }\n    }\n);\n"
  learner_created: false
- name: src/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Virtual Piano</title>
    </head>
    <body>
    <kbd>A</kbd>
    <kbd>S</kbd>
    <kbd>D</kbd>
    <kbd>F</kbd>
    <kbd>G</kbd>
    <kbd>H</kbd>
    <kbd>J</kbd>
    </body>
    </html>
  learner_created: false
feedback_link: https://hyperskill.org/projects/101/stages/560/implement
status: Unchecked
record: -1
